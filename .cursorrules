This is a context for AI editor/agent about the project. It's generated with a tool Airul (https://github.com/mitkury/airul) out of 4 sources. Feel free to edit .airul.json to change the sources and configure editors. Run `airul gen` to update the context after making changes to .airul.json or the sources. Remember to update TODO-AI.md after major changes in the project, keeping track of completed tasks and new developments.

# From README.md:

# RepTree

A tree data structure using CRDTs for seamless replication between peers.

> ðŸš§ **Work in Progress**: This package is under active development and APIs may change.
>
> RepTree was created for the [Supa](https://github.com/supaorg/supa) project, an open-source alternative to ChatGPT.

## Description

RepTree uses 2 conflict-free replicated data types (CRDTs) to manage seamless replication between peers:
- A move tree CRDT is used for the tree structure (https://martin.kleppmann.com/papers/move-op.pdf).
- A last writer wins (LWW) CRDT is used for properties.

RepTree can also be viewed as a hierarchical, distributed database. For more details on its database capabilities, see [RepTree as a Database](docs/database.md).

## Installation

```bash
npm install reptree
```

## Usage

```typescript
import { RepTree } from 'reptree';

// Create a new tree
const tree = new RepTree('peer1');

// Root vertex is created automatically
const rootVertex = tree.rootVertex;
rootVertex.name = 'Project';

// Create a folder structure with properties
const docsFolder = rootVertex.newNamedChild('Docs');
docsFolder.setProperties({
  type: 'folder',
  icon: 'folder-icon'
});

const imagesFolder = rootVertex.newNamedChild('Images');
imagesFolder.setProperties({
  type: 'folder',
  icon: 'image-icon'
});

// Add files to folders
const readmeFile = docsFolder.newNamedChild('README.md');
readmeFile.setProperties({
  type: 'file',
  size: 2048,
  lastModified: '2023-10-15T14:22:10Z',
  s3Path: 's3://my-bucket/docs/README.md'
});

const logoFile = imagesFolder.newNamedChild('logo.png');
logoFile.setProperties({
  type: 'file',
  size: 15360,
  dimensions: '512x512',
  format: 'png',
  s3Path: 's3://my-bucket/images/logo.png'
});

// Move a file to a different folder
logoFile.moveTo(docsFolder);

// Get children of a folder
const docsFolderContents = docsFolder.children;

// Syncing between trees
const otherTree = new RepTree('peer2');
const ops = tree.getAllOps();
otherTree.merge(ops);
```

## License

MIT
---

# From package.json:

{
  "name": "reptree",
  "version": "0.1.2",
  "description": "A tree data structure using CRDTs for seamless replication between peers",
  "main": "dist/index.cjs",
  "module": "dist/index.js",
  "types": "dist/index.d.ts",
  "type": "module",
  "exports": {
    ".": {
      "types": "./dist/index.d.ts",
      "import": "./dist/index.js",
      "require": "./dist/index.cjs"
    }
  },
  "files": [
    "dist",
    "README.md"
  ],
  "scripts": {
    "prebuild": "rm -rf dist",
    "build": "tsup",
    "dev": "tsup --watch",
    "pretest": "npm run build",
    "test": "vitest run",
    "test:watch": "vitest",
    "test:basic": "vitest run --run basic-usage",
    "test:fuzzy": "vitest run --run fuzzy",
    "test:vector": "vitest run --run state-vector-sync",
    "test:comparison": "vitest run --run comparison",
    "test:coverage": "vitest run --coverage",
    "example": "npm run build && node --loader ts-node/esm examples/basic-usage.ts",
    "prepublishOnly": "npm run build"
  },
  "keywords": [
    "crdt",
    "tree",
    "data-structure",
    "replication"
  ],
  "author": "Dmitry Kury (d@dkury.com)",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mitkury/reptree.git"
  },
  "homepage": "https://github.com/mitkury/reptree#readme",
  "bugs": {
    "url": "https://github.com/mitkury/reptree/issues"
  },
  "devDependencies": {
    "ts-node": "^10.9.1",
    "tsup": "^8.0.1",
    "typescript": "^5.2.2",
    "vitest": "^1.0.0"
  }
}
---

# From docs/database.md:

# RepTree as a Database

## Data Orientation and Model

RepTree is a hierarchical, tree-structured, distributed database with the following characteristics:

- **Tree-Based Data Model**: Organizes data in a parent-child hierarchy of vertices
- **Property System**: Each vertex contains key-value properties
- **Dual Property Types**: Supports both persistent and transient properties
- **Vertex Relocation**: Vertices can be moved within the tree while maintaining consistency

## CRDT Foundation

RepTree employs a dual CRDT architecture for distributed operation:

- **Move Tree CRDT**: Handles structural operations (based on [Kleppmann's paper](https://martin.kleppmann.com/papers/move-op.pdf))
- **Last-Writer-Wins (LWW) CRDT**: Manages property values with simple conflict resolution
- **Strong Eventual Consistency**: All replicas eventually converge to identical states

## Operation-Based Storage

- **Operation Logs**: Maintains ordered logs of operations rather than just state
- **Move Operations**: Track structural changes to the tree
- **Property Operations**: Track changes to vertex properties
- **Causal Ordering**: Uses Lamport clocks to establish operation ordering

## Synchronization Protocol

- **Range-Based State Vectors**: Efficiently track which operations have been applied
- **Delta Synchronization**: Transmits only missing operations during peer synchronization
- **Conflict Resolution Algorithm**: Built-in algorithms for resolving concurrent edits

## Query and Access Patterns

- **Hierarchical Traversal**: Primary access method via parent-child relationships
- **Direct Vertex Access**: Fast lookup by vertex ID
- **Child Enumeration**: List and filter children of a vertex
- **Property Access**: Get and set properties on any vertex

## Performance Considerations

- **In-Memory Operation**: Core operations are in-memory for performance
- **Persistence via Snapshots**: Periodic snapshots with incremental operation logs
- **Optimized Child Storage**: Proposals for B-tree storage for vertices with many children
- **Memory Efficiency**: Transient properties for ephemeral data

## Comparison to Traditional Databases

While traditional databases focus on:
- Tables and relations (relational)
- Document collections (document-oriented)
- Arbitrary node connections (graph)

RepTree specializes in:
- Hierarchical data representation
- Built-in collaborative editing
- Peer-to-peer operation with conflict resolution
- Strong eventual consistency guarantees

## Extension Capabilities

RepTree can be extended to serve as:
- A virtual file system (with specialized vertex types)
- A rich text collaborative editor (via Yjs integration)
- A versioned data store (via operation history)

RepTree combines aspects of tree databases, event-sourced systems, and CRDT-based collaborative editors into a specialized database paradigm optimized for hierarchical, distributed data management.
---

# From TODO-AI.md:

# AI Workspace

## Active Task
âœ… Create an npm package for RepTree. I've separated it from the main project to make it into a self-contained package on npm. I want it to be compiled into a dist using tsup

## Status
âœ… Completed

## Context & Progress
- Created: 2025-03-18
- Completed: 2025-03-18
- I (AI) will maintain this document as we work together
- My current focus: Task completed successfully

## Task History
- Initial task: Create an npm package for RepTree. I've separated it from the main project to make it into a self-contained package on npm. I want it to be compiled into a dist using tsup
- Tasks completed:
  - Created package.json with proper configuration
  - Set up tsup for building the package
  - Created TypeScript configuration
  - Fixed type errors for successful build
  - Added basic examples and tests
  - Successfully built the package
  - Renamed package to reptree and main class to RepTree

## Notes
- RepTree npm package has been successfully created
- The package uses tsup for building to multiple formats (CommonJS, ESM)
- Added proper TypeScript type definitions
- Package includes tests and examples
- Ready for publishing to npm (can be done with `npm publish`)